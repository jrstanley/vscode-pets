{"version":3,"file":"main-bundle.js","mappings":"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","sources":["webpack://petApp/./src/common/names.ts","webpack://petApp/./src/panel/main.ts","webpack://petApp/./src/panel/pets.ts","webpack://petApp/./src/panel/states.ts","webpack://petApp/webpack/bootstrap","webpack://petApp/webpack/startup"],"sourcesContent":["export const PET_NAMES: Map<number, string> = new Map<number, string>([\n    [1, 'Bella'],\n    [2, 'Charlie'],\n    [3, 'Max'],\n    [4, 'Molly'],\n    [5, 'Coco'],\n    [6, 'Buddy'],\n    [7, 'Ruby'],\n    [8, 'Oscar'],\n    [9, 'Lucy'],\n    [10, 'Bailey'],\n    [11, 'Milo'],\n    [12, 'Daisy'],\n    [13, 'Archie'],\n    [14, 'Ollie'],\n    [15, 'Rosie'],\n    [16, 'Lola'],\n    [17, 'Frankie'],\n    [18, 'Toby'],\n    [19, 'Roxy'],\n    [20, 'Poppy'],\n    [21, 'Luna'],\n    [22, 'Jack'],\n    [23, 'Millie'],\n    [24, 'Teddy'],\n    [25, 'Harry'],\n    [26, 'Cooper'],\n    [27, 'Bear'],\n    [28, 'Rocky'],\n    [29, 'Alfie'],\n    [30, 'Hugo'],\n    [31, 'Bonnie'],\n    [32, 'Pepper'],\n    [33, 'Lily'],\n    [34, 'Tilly'],\n    [35, 'Leo'],\n    [36, 'Maggie'],\n    [37, 'George'],\n    [38, 'Mia'],\n    [39, 'Marley'],\n    [40, 'Harley'],\n    [41, 'Chloe'],\n    [42, 'Lulu'],\n    [43, 'Missy'],\n    [44, 'Jasper'],\n    [45, 'Billy'],\n    [46, 'Nala'],\n    [47, 'Monty'],\n    [48, 'Ziggy'],\n    [49, 'Winston'],\n    [50, 'Zeus'],\n    [51, 'Zoe'],\n    [52, 'Stella'],\n    [53, 'Sasha'],\n    [54, 'Rusty'],\n    [55, 'Gus'],\n    [56, 'Baxter'],\n    [57, 'Dexter'],\n    [58, 'Diesel'],\n    [59, 'Willow'],\n    [60, 'Barney'],\n    [61, 'Bruno'],\n    [62, 'Penny'],\n    [63, 'Honey'],\n    [64, 'Milly'],\n    [65, 'Murphy'],\n    [66, 'Simba'],\n    [67, 'Holly'],\n    [68, 'Benji'],\n    [69, 'Henry'],\n    [70, 'Lilly'],\n    [71, 'Pippa'],\n    [72, 'Shadow'],\n    [73, 'Sam'],\n    [74, 'Buster'],\n    [75, 'Lucky'],\n    [76, 'Ellie'],\n    [77, 'Duke'],\n    [78, 'Jessie'],\n    [79, 'Cookie'],\n    [80, 'Harvey'],\n    [81, 'Bruce'],\n    [82, 'Jax'],\n    [83, 'Rex'],\n    [84, 'Louie'],\n    [85, 'Bentley'],\n    [86, 'Jet'],\n    [87, 'Banjo'],\n    [88, 'Beau'],\n    [89, 'Ella'],\n    [90, 'Ralph'],\n    [91, 'Loki'],\n    [92, 'Lexi'],\n    [93, 'Chester'],\n    [94, 'Sophie'],\n    [95, 'Chilli'],\n    [96, 'Billie'],\n    [97, 'Louis'],\n    [98, 'Scout'],\n    [99, 'Charlie'],\n    [100, 'Cleo'],\n    [101, 'Purfect'],\n    [102, 'Spot'],\n    [103, 'Harry'],\n    [104, 'Bolt'],\n]);\n\nexport const CAT_NAMES = PET_NAMES;\n\nexport const DOG_NAMES = PET_NAMES;\n\nexport const CRAB_NAMES: Map<number, string> = new Map<number, string>([\n    [1, 'Ferris'],\n    [2, 'Pinchy'],\n    [3, 'Grabby'],\n    [4, 'Big Red'],\n    [5, 'Crabby'],\n    [6, 'Buddy'],\n    [7, 'Ruby Red'],\n    [8, 'Oscar'],\n    [9, 'Lucy'],\n    [10, 'Bailey'],\n]);\n\nexport const CLIPPY_NAMES: Map<number, string> = new Map<number, string>([\n    [1, 'Clippy'],\n    [2, 'Karl Klammer'],\n    [3, 'Clippy Jr.'],\n    [4, 'Molly'],\n    [5, 'Coco'],\n    [6, 'Buddy'],\n    [7, 'Ruby'],\n    [8, 'Oscar'],\n    [9, 'Lucy'],\n    [10, 'Bailey'],\n]);\n\nexport const TOTORO_NAMES: Map<number, string> = new Map<number, string>([\n    [1, 'Totoro'],\n    [2, 'トトロ'],\n    [3, 'Max'],\n    [4, 'Molly'],\n    [5, 'Coco'],\n    [6, 'Buddy'],\n    [7, 'Ruby'],\n    [8, 'Oscar'],\n    [9, 'Lucy'],\n    [10, 'Bailey'],\n]);\n\nexport const SNAKE_NAMES: Map<number, string> = new Map<number, string>([\n    [1, 'Sneaky'],\n    [2, 'Mr Slippery'],\n    [3, 'Max'],\n    [4, 'Molly'],\n    [5, 'Coco'],\n    [6, 'Buddy'],\n    [7, 'Ruby'],\n    [8, 'Oscar'],\n    [9, 'Lucy'],\n    [10, 'Bailey'],\n]);\n\nexport const DUCK_NAMES: Map<number, string> = new Map<number, string>([\n    [1, 'Quacky'],\n    [2, 'Floaty'],\n    [3, 'Duck'],\n    [4, 'Molly'],\n    [5, 'Sunshine'],\n    [6, 'Buddy'],\n    [7, 'Chirpy'],\n    [8, 'Oscar'],\n    [9, 'Lucy'],\n    [10, 'Bailey'],\n]);\n\nexport const ZAPPY_NAMES: Map<number, string> = new Map<number, string>([\n    [1, 'Zappy'],\n    [2, 'Zippy'],\n    [3, 'Zappy Jr.'],\n    [4, 'Zoppy'],\n    [5, 'Zuppy'],\n    [6, 'Zeppy'],\n    [7, 'Big Z'],\n    [8, 'Little z'],\n    [9, 'The Flash'],\n    [10, 'Thor'],\n]);\n\nexport const ROCKY_NAMES: Map<number, string> = new Map<number, string>([\n    [1, 'Rocky'],\n    [2, 'The Rock'],\n    [3, 'Quartzy'],\n    [4, 'Rocky I'],\n    [5, 'Rocky II'],\n    [6, 'Rocky III'],\n    [7, 'Pebbles Sr.'],\n    [8, 'Big Granite'],\n    [9, 'Boulder'],\n    [10, 'Rockefeller'],\n]);\n","// This script will be run within the webview itself\nimport {\n    PetSize,\n    PetColor,\n    PetType,\n    Theme,\n    ColorThemeKind,\n    WebviewMessage,\n} from '../common/types';\nimport {\n    createPet,\n    IPetType,\n    InvalidPetException,\n    PetCollection,\n    PetElement,\n    IPetCollection,\n} from './pets';\nimport {\n    BallState,\n    ChaseFriendState,\n    PetElementState,\n    PetInstanceState,\n    PetPanelState,\n    States,\n} from './states';\n\n/* This is how the VS Code API can be invoked from the panel */\ndeclare global {\n    interface VscodeStateApi {\n        getState(): PetPanelState; // API is actually Any, but we want it to be typed.\n        setState(state: PetPanelState): void;\n        postMessage(message: WebviewMessage): void;\n    }\n    interface Window {\n        acquireVsCodeApi(): VscodeStateApi;\n    }\n}\n\nconsole.log('here');\nconsole.log(typeof self);\nconsole.log(self);\n// console.log(window);\n// declare var acquireVsCodeApi: any;\n// console.log(typeof window);\n// const vscode: any = self;\n// (typeof window !== 'undefined') ? window.acquireVsCodeApi() : self;\nconst vscode = window.acquireVsCodeApi();\n// const vscode = require('vscode');\nconsole.log('here2');\n\nexport var allPets: IPetCollection = new PetCollection();\nvar petCounter: number;\n\nfunction calculateBallRadius(size: PetSize): number {\n    if (size === PetSize.nano) {\n        return 2;\n    } else if (size === PetSize.medium) {\n        return 4;\n    } else if (size === PetSize.large) {\n        return 8;\n    } else {\n        return 1; // Shrug\n    }\n}\n\nfunction calculateFloor(size: PetSize, theme: Theme): number {\n    switch (theme) {\n        case Theme.forest:\n            switch (size) {\n                case PetSize.medium:\n                    return 40;\n                case PetSize.large:\n                    return 65;\n                case PetSize.nano:\n                default:\n                    return 23;\n            }\n        case Theme.castle:\n            switch (size) {\n                case PetSize.medium:\n                    return 80;\n                case PetSize.large:\n                    return 120;\n                case PetSize.nano:\n                default:\n                    return 45;\n            }\n    }\n    return 0;\n}\n\nfunction handleMouseOver(e: MouseEvent) {\n    var el = e.currentTarget as HTMLDivElement;\n    allPets.pets().forEach((element) => {\n        if (element.collision === el) {\n            if (!element.pet.canSwipe()) {\n                return;\n            }\n            element.pet.swipe();\n        }\n    });\n}\n\nfunction startAnimations(collision: HTMLDivElement, pet: IPetType) {\n    collision.addEventListener('mouseover', handleMouseOver);\n    setInterval(() => {\n        var updates = allPets.seekNewFriends();\n        updates.forEach((message) => {\n            vscode.postMessage({\n                text: message,\n                command: 'info',\n            });\n        });\n        pet.nextFrame();\n        saveState();\n    }, 100);\n}\n\nfunction addPetToPanel(\n    petType: PetType,\n    basePetUri: string,\n    petColor: PetColor,\n    petSize: PetSize,\n    left: number,\n    bottom: number,\n    floor: number,\n    name: string | undefined,\n): PetElement {\n    var petSpriteElement: HTMLImageElement = document.createElement('img');\n    petSpriteElement.className = 'pet';\n    (document.getElementById('petsContainer') as HTMLDivElement).appendChild(\n        petSpriteElement,\n    );\n\n    var collisionElement: HTMLDivElement = document.createElement('div');\n    collisionElement.className = 'collision';\n    (document.getElementById('petsContainer') as HTMLDivElement).appendChild(\n        collisionElement,\n    );\n\n    const root = basePetUri + '/' + petType + '/' + petColor;\n    console.log('Creating new pet : ', petType, root);\n    var newPet = createPet(\n        petType,\n        petSpriteElement,\n        collisionElement,\n        petSize,\n        left,\n        bottom,\n        root,\n        floor,\n        name,\n    );\n    petCounter++;\n    startAnimations(collisionElement, newPet);\n    return new PetElement(\n        petSpriteElement,\n        collisionElement,\n        newPet,\n        petColor,\n        petType,\n    );\n}\n\nfunction removePetFromPanel(pet: PetElement): any {\n    pet.collision.removeEventListener('mouseover', handleMouseOver);\n    (document.getElementById('petsContainer') as HTMLDivElement).removeChild(\n        pet.collision,\n    );\n    pet.collision.remove();\n    pet.remove();\n}\n\nexport function saveState() {\n    var state = new PetPanelState();\n    state.petStates = new Array();\n\n    allPets.pets().forEach((petItem) => {\n        state.petStates!.push({\n            petName: petItem.pet.name(),\n            petColor: petItem.color,\n            petType: petItem.type,\n            petState: petItem.pet.getState(),\n            petFriend: petItem.pet.friend()\n                ? petItem.pet.friend().name()\n                : undefined,\n            elLeft: petItem.el.style.left,\n            elBottom: petItem.el.style.bottom,\n        });\n    });\n    state.petCounter = petCounter;\n    vscode.setState(state);\n}\n\nfunction recoverState(basePetUri: string, petSize: PetSize, floor: number) {\n    var state = vscode.getState();\n\n    if (state.petCounter === undefined || isNaN(state.petCounter)) {\n        petCounter = 1;\n    } else {\n        petCounter = state.petCounter!;\n    }\n\n    var recoveryMap: Map<IPetType, PetElementState> = new Map();\n    state.petStates!.forEach((p: any) => {\n        // Fixes a bug related to duck animations\n        if ((p.petType as string) === 'rubber duck') {\n            (p.petType as string) = 'rubber-duck';\n        }\n\n        try {\n            var newPet = addPetToPanel(\n                p.petType!,\n                basePetUri,\n                p.petColor!,\n                petSize,\n                parseInt(p.elLeft!),\n                parseInt(p.elBottom!),\n                floor,\n                p.petName,\n            );\n            allPets.push(newPet);\n            recoveryMap.set(newPet.pet, p);\n        } catch (InvalidPetException) {\n            console.log(\n                'State had invalid pet (' + p.petType + '), discarding.',\n            );\n        }\n    });\n    recoveryMap.forEach((state, pet) => {\n        // Recover previous state.\n        pet.recoverState(state.petState!);\n\n        // Resolve friend relationships\n        var friend = undefined;\n        if (state.petFriend) {\n            friend = allPets.locate(state.petFriend);\n            if (friend) {\n                pet.recoverFriend(friend.pet);\n            }\n        }\n    });\n}\n\nfunction randomStartPosition(): number {\n    return Math.floor(Math.random() * (window.innerWidth * 0.7));\n}\n\nlet canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D;\n\nfunction initCanvas() {\n    canvas = document.getElementById('petCanvas') as HTMLCanvasElement;\n    ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    ctx.canvas.width = window.innerWidth;\n    ctx.canvas.height = window.innerHeight;\n}\n\n// It cannot access the main VS Code APIs directly.\nexport function petPanelApp(\n    basePetUri: string,\n    theme: Theme,\n    themeKind: ColorThemeKind,\n    petColor: PetColor,\n    petSize: PetSize,\n    petType: PetType,\n) {\n    const ballRadius: number = calculateBallRadius(petSize);\n    var floor = 0;\n    // Apply Theme backgrounds\n    if (theme !== Theme.none) {\n        var _themeKind = '';\n        switch (themeKind) {\n            case ColorThemeKind.dark:\n                _themeKind = 'dark';\n                break;\n            case ColorThemeKind.light:\n                _themeKind = 'light';\n                break;\n            case ColorThemeKind.highContrast:\n            default:\n                _themeKind = 'light';\n                break;\n        }\n\n        document.body.style.backgroundImage = `url('${basePetUri}/backgrounds/${theme}/background-${_themeKind}-${petSize}.png')`;\n        document.getElementById(\n            'foreground',\n        )!.style.backgroundImage = `url('${basePetUri}/backgrounds/${theme}/foreground-${_themeKind}-${petSize}.png')`;\n\n        floor = calculateFloor(petSize, theme); // Themes have pets at a specified height from the ground\n    } else {\n        document.body.style.backgroundImage = '';\n        document.getElementById('foreground')!.style.backgroundImage = '';\n    }\n\n    /// Bouncing ball components, credit https://stackoverflow.com/a/29982343\n    const gravity: number = 0.2,\n        damping: number = 0.9,\n        traction: number = 0.8;\n    var ballState: BallState;\n\n    function resetBall() {\n        canvas.style.display = 'block';\n        ballState = new BallState(100, 100, 2, 5);\n    }\n\n    function throwBall() {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        if (!ballState.paused) {\n            requestAnimationFrame(throwBall);\n        }\n\n        if (ballState.cx + ballRadius >= canvas.width) {\n            ballState.vx = -ballState.vx * damping;\n            ballState.cx = canvas.width - ballRadius;\n        } else if (ballState.cx - ballRadius <= 0) {\n            ballState.vx = -ballState.vx * damping;\n            ballState.cx = ballRadius;\n        }\n        if (ballState.cy + ballRadius + floor >= canvas.height) {\n            ballState.vy = -ballState.vy * damping;\n            ballState.cy = canvas.height - ballRadius - floor;\n            // traction here\n            ballState.vx *= traction;\n        } else if (ballState.cy - ballRadius <= 0) {\n            ballState.vy = -ballState.vy * damping;\n            ballState.cy = ballRadius;\n        }\n\n        ballState.vy += gravity;\n\n        ballState.cx += ballState.vx;\n        ballState.cy += ballState.vy;\n\n        ctx.beginPath();\n        ctx.arc(ballState.cx, ballState.cy, ballRadius, 0, 2 * Math.PI, false);\n        ctx.fillStyle = '#2ed851';\n        ctx.fill();\n    }\n\n    console.log('Starting pet session', petColor, basePetUri, petType);\n    // New session\n    var state = vscode.getState();\n    if (!state) {\n        console.log('No state, starting a new session.');\n        petCounter = 1;\n        allPets.push(\n            addPetToPanel(\n                petType,\n                basePetUri,\n                petColor,\n                petSize,\n                randomStartPosition(),\n                floor,\n                floor,\n                undefined,\n            ),\n        );\n        saveState();\n    } else {\n        console.log('Recovering state - ', state);\n        recoverState(basePetUri, petSize, floor);\n    }\n\n    initCanvas();\n\n    // Handle messages sent from the extension to the webview\n    window.addEventListener('message', (event): void => {\n        const message = event.data; // The json data that the extension sent\n        switch (message.command) {\n            case 'throw-ball':\n                resetBall();\n                throwBall();\n                allPets.pets().forEach((petEl) => {\n                    if (petEl.pet.canChase()) {\n                        petEl.pet.chase(ballState, canvas);\n                    }\n                });\n                break;\n            case 'spawn-pet':\n                allPets.push(\n                    addPetToPanel(\n                        message.type,\n                        basePetUri,\n                        message.color,\n                        petSize,\n                        randomStartPosition(),\n                        floor,\n                        floor,\n                        undefined,\n                    ),\n                );\n                saveState();\n                break;\n            case 'delete-pet':\n                var pet = allPets.locate(message.id);\n                if (pet) {\n                    pet.remove();\n                    saveState();\n                }\n                break;\n            case 'reset-pet':\n                allPets.pets().forEach((pet) => {\n                    pet.el.remove();\n                    pet.collision.remove();\n                });\n                allPets.reset();\n                allPets.push(\n                    addPetToPanel(\n                        petType,\n                        basePetUri,\n                        petColor,\n                        petSize,\n                        randomStartPosition(),\n                        floor,\n                        floor,\n                        undefined,\n                    ),\n                );\n                petCounter = 1;\n                saveState();\n                break;\n            case 'pause-pet':\n                petCounter = 1;\n                saveState();\n                break;\n        }\n    });\n}\nwindow.addEventListener('resize', function () {\n    initCanvas();\n});\n","import { PetColor, PetSize, PetSpeed, PetType } from '../common/types';\nimport { ISequenceTree } from './sequences';\nimport {\n    IState,\n    States,\n    resolveState,\n    HorizontalDirection,\n    ChaseState,\n    BallState,\n    FrameResult,\n    PetInstanceState,\n    isStateAboveGround,\n} from './states';\nimport {\n    CAT_NAMES,\n    DOG_NAMES,\n    CRAB_NAMES,\n    SNAKE_NAMES,\n    CLIPPY_NAMES,\n    TOTORO_NAMES,\n    DUCK_NAMES,\n    ZAPPY_NAMES,\n    ROCKY_NAMES,\n} from '../common/names';\nimport { PetSpecification } from '../extension/extension';\n\nexport class InvalidStateException {}\n\nexport class PetElement {\n    el: HTMLImageElement;\n    collision: HTMLDivElement;\n    pet: IPetType;\n    color: PetColor;\n    type: PetType;\n    remove() {\n        this.el.remove();\n        this.collision.remove();\n        this.color = PetColor.null;\n        this.type = PetType.null;\n    }\n\n    constructor(\n        el: HTMLImageElement,\n        collision: HTMLDivElement,\n        pet: IPetType,\n        color: PetColor,\n        type: PetType,\n    ) {\n        this.el = el;\n        this.collision = collision;\n        this.pet = pet;\n        this.color = color;\n        this.type = type;\n    }\n}\n\nexport interface IPetCollection {\n    pets(): Array<PetElement>;\n    push(pet: PetElement): void;\n    reset(): void;\n    seekNewFriends(): string[];\n    locate(name: string): PetElement | undefined;\n    remove(name: string): void;\n}\n\nexport class PetCollection implements IPetCollection {\n    _pets: Array<PetElement>;\n\n    constructor() {\n        this._pets = new Array(0);\n    }\n\n    pets() {\n        return this._pets;\n    }\n\n    push(pet: PetElement) {\n        this._pets.push(pet);\n    }\n\n    reset() {\n        this._pets = [];\n    }\n\n    locate(name: string): PetElement | undefined {\n        return this._pets.find((collection, value, obj) => {\n            return collection.pet.name() === name;\n        });\n    }\n\n    remove(name: string): any {\n        for (var i = 0; i < this._pets.length; i++) {\n            if (this._pets[i].pet.name() === name) {\n                this._pets.splice(i, 1);\n            }\n        }\n        this._pets.forEach((pet) => {\n            if (pet.pet.name() === name) {\n                pet.remove();\n            }\n        });\n    }\n\n    seekNewFriends(): string[] {\n        if (this._pets.length <= 1) {\n            return [];\n        } // You can't be friends with yourself.\n        var messages = new Array<string>(0);\n        this._pets.forEach((petInCollection) => {\n            if (petInCollection.pet.hasFriend()) {\n                return;\n            } // I already have a friend!\n            this._pets.forEach((potentialFriend) => {\n                if (potentialFriend.pet.hasFriend()) {\n                    return;\n                } // Already has a friend. sorry.\n                if (!potentialFriend.pet.canChase()) {\n                    return;\n                } // Pet is busy doing something else.\n                if (\n                    potentialFriend.pet.left() > petInCollection.pet.left() &&\n                    potentialFriend.pet.left() <\n                        petInCollection.pet.left() + petInCollection.pet.width()\n                ) {\n                    // We found a possible new friend..\n                    console.log(\n                        petInCollection.pet.name(),\n                        ' wants to be friends with ',\n                        potentialFriend.pet.name(),\n                        '.',\n                    );\n                    if (\n                        petInCollection.pet.makeFriendsWith(potentialFriend.pet)\n                    ) {\n                        messages.push(\n                            `${petInCollection.pet.name()} (${petInCollection.pet.emoji()}): I'm now friends ❤️ with ${potentialFriend.pet.name()} (${potentialFriend.pet.emoji()})`,\n                        );\n                    }\n                }\n            });\n        });\n        return messages;\n    }\n}\n\nexport interface IPetType {\n    nextFrame(): void;\n\n    // Special methods for actions\n    canSwipe(): boolean;\n    canChase(): boolean;\n    swipe(): void;\n    chase(ballState: BallState, canvas: HTMLCanvasElement): void;\n    speed(): number;\n    isMoving(): boolean;\n\n    // State API\n    getState(): PetInstanceState;\n    recoverState(state: PetInstanceState): void;\n    recoverFriend(friend: IPetType): void;\n\n    // Positioning\n    bottom(): number;\n    left(): number;\n    positionBottom(bottom: number): void;\n    positionLeft(left: number): void;\n    width(): number;\n    floor(): number;\n\n    // Friends API\n    name(): string;\n    emoji(): string;\n    hasFriend(): boolean;\n    friend(): IPetType;\n    makeFriendsWith(friend: IPetType): boolean;\n    isPlaying(): boolean;\n}\n\nfunction calculateSpriteWidth(size: PetSize): number {\n    if (size === PetSize.nano) {\n        return 30;\n    } else if (size === PetSize.medium) {\n        return 55;\n    } else if (size === PetSize.large) {\n        return 110;\n    } else {\n        return 30; // Shrug\n    }\n}\n\nabstract class BasePetType implements IPetType {\n    label: string = 'base';\n    static count: number = 0;\n    sequence: ISequenceTree = {\n        startingState: States.sitIdle,\n        sequenceStates: [],\n    };\n    currentState: IState;\n    currentStateEnum: States;\n    holdState: IState | undefined;\n    holdStateEnum: States | undefined;\n    private el: HTMLImageElement;\n    private collision: HTMLDivElement;\n    private _left: number;\n    private _bottom: number;\n    petRoot: string;\n    _floor: number;\n    _friend: IPetType | undefined;\n    private _name: string;\n    private _speed: number;\n\n    constructor(\n        spriteElement: HTMLImageElement,\n        collisionElement: HTMLDivElement,\n        size: PetSize,\n        left: number,\n        bottom: number,\n        petRoot: string,\n        floor: number,\n        name: string,\n        speed: number,\n    ) {\n        this.el = spriteElement;\n        this.collision = collisionElement;\n        this.petRoot = petRoot;\n        this._floor = floor;\n        this._left = left;\n        this._bottom = bottom;\n        this.initSprite(size, left, bottom);\n        this.currentStateEnum = this.sequence.startingState;\n        this.currentState = resolveState(this.currentStateEnum, this);\n\n        this._name = name;\n        this._speed = speed;\n\n        // Increment the static count of the Pet class that the constructor belongs to\n        (this.constructor as any).count += 1;\n    }\n\n    initSprite(petSize: PetSize, left: number, bottom: number) {\n        this.el.style.left = `${left}px`;\n        this.el.style.bottom = `${bottom}px`;\n        this.el.style.width = 'auto';\n        this.el.style.height = 'auto';\n        this.el.style.maxWidth = `${calculateSpriteWidth(petSize)}px`;\n        this.el.style.maxHeight = `${calculateSpriteWidth(petSize)}px`;\n        this.collision.style.left = `${left}px`;\n        this.collision.style.bottom = `${bottom}px`;\n        this.collision.style.width = `${calculateSpriteWidth(petSize)}px`;\n        this.collision.style.height = `${calculateSpriteWidth(petSize)}px`;\n    }\n\n    left(): number {\n        return this._left;\n    }\n\n    bottom(): number {\n        return this._bottom;\n    }\n\n    positionBottom(bottom: number): void {\n        this._bottom = bottom;\n        this.el.style.bottom = `${this._bottom}px`;\n        this.el.style.bottom = `${this._bottom}px`;\n        this.collision.style.left = `${this._left}px`;\n        this.collision.style.bottom = `${this._bottom}px`;\n    }\n\n    positionLeft(left: number): void {\n        this._left = left;\n        this.el.style.left = `${this._left}px`;\n        this.el.style.left = `${this._left}px`;\n        this.collision.style.left = `${this._left}px`;\n        this.collision.style.bottom = `${this._bottom}px`;\n    }\n\n    width(): number {\n        return this.el.width;\n    }\n\n    floor(): number {\n        return this._floor;\n    }\n\n    getState(): PetInstanceState {\n        return { currentStateEnum: this.currentStateEnum };\n    }\n\n    speed(): number {\n        return this._speed;\n    }\n\n    isMoving(): boolean {\n        return this._speed !== PetSpeed.still;\n    }\n\n    recoverFriend(friend: IPetType) {\n        // Recover friends..\n        this._friend = friend;\n    }\n\n    recoverState(state: PetInstanceState) {\n        // TODO : Resolve a bug where if it was swiping before, it would fail\n        // because holdState is no longer valid.\n        this.currentStateEnum = state.currentStateEnum!;\n        this.currentState = resolveState(this.currentStateEnum, this);\n\n        if (!isStateAboveGround(this.currentStateEnum)) {\n            // Reset the bottom of the sprite to the floor as the theme\n            // has likely changed.\n            this.positionBottom(this.floor());\n        }\n    }\n\n    canSwipe() {\n        return !isStateAboveGround(this.currentStateEnum);\n    }\n\n    canChase() {\n        return (\n            !isStateAboveGround(this.currentStateEnum) &&\n            this.currentStateEnum !== States.chase &&\n            this.isMoving()\n        );\n    }\n\n    swipe() {\n        if (this.currentStateEnum === States.swipe) {\n            return;\n        }\n        this.holdState = this.currentState;\n        this.holdStateEnum = this.currentStateEnum;\n        this.currentStateEnum = States.swipe;\n        this.currentState = resolveState(this.currentStateEnum, this);\n    }\n\n    chase(ballState: BallState, canvas: HTMLCanvasElement) {\n        this.currentStateEnum = States.chase;\n        this.currentState = new ChaseState(this, ballState, canvas);\n    }\n\n    faceLeft() {\n        this.el.style.transform = 'scaleX(-1)';\n    }\n\n    faceRight() {\n        this.el.style.transform = 'scaleX(1)';\n    }\n\n    setAnimation(face: string) {\n        if (this.el.src.endsWith(`_${face}_8fps.gif`)) {\n            return;\n        }\n        this.el.src = `${this.petRoot}_${face}_8fps.gif`;\n    }\n\n    chooseNextState(fromState: States): States {\n        // Work out next state\n        var possibleNextStates: States[] | undefined = undefined;\n        for (var i = 0; i < this.sequence.sequenceStates.length; i++) {\n            if (this.sequence.sequenceStates[i].state === fromState) {\n                possibleNextStates =\n                    this.sequence.sequenceStates[i].possibleNextStates;\n            }\n        }\n        if (!possibleNextStates) {\n            throw new InvalidStateException();\n        }\n        // randomly choose the next state\n        const idx = Math.floor(Math.random() * possibleNextStates.length);\n        return possibleNextStates[idx];\n    }\n\n    nextFrame() {\n        if (\n            this.currentState.horizontalDirection === HorizontalDirection.left\n        ) {\n            this.faceLeft();\n        } else if (\n            this.currentState.horizontalDirection === HorizontalDirection.right\n        ) {\n            this.faceRight();\n        }\n        this.setAnimation(this.currentState.spriteLabel);\n\n        // What's my buddy doing?\n        if (\n            this.hasFriend() &&\n            this.currentStateEnum !== States.chaseFriend &&\n            this.isMoving()\n        ) {\n            if (\n                this.friend().isPlaying() &&\n                !isStateAboveGround(this.currentStateEnum)\n            ) {\n                this.currentState = resolveState(States.chaseFriend, this);\n                this.currentStateEnum = States.chaseFriend;\n                return;\n            }\n        }\n\n        var frameResult = this.currentState.nextFrame();\n        if (frameResult === FrameResult.stateComplete) {\n            // If recovering from swipe..\n            if (this.holdState && this.holdStateEnum) {\n                this.currentState = this.holdState;\n                this.currentStateEnum = this.holdStateEnum;\n                this.holdState = undefined;\n                this.holdStateEnum = undefined;\n                return;\n            }\n\n            var nextState = this.chooseNextState(this.currentStateEnum);\n            this.currentState = resolveState(nextState, this);\n            this.currentStateEnum = nextState;\n        } else if (frameResult === FrameResult.stateCancel) {\n            if (this.currentStateEnum === States.chase) {\n                var nextState = this.chooseNextState(States.idleWithBall);\n                this.currentState = resolveState(nextState, this);\n                this.currentStateEnum = nextState;\n            } else if (this.currentStateEnum === States.chaseFriend) {\n                var nextState = this.chooseNextState(States.idleWithBall);\n                this.currentState = resolveState(nextState, this);\n                this.currentStateEnum = nextState;\n            }\n        }\n    }\n\n    hasFriend(): boolean {\n        return this._friend !== undefined;\n    }\n\n    friend(): IPetType {\n        return this._friend!;\n    }\n\n    name(): string {\n        return this._name;\n    }\n\n    makeFriendsWith(friend: IPetType): boolean {\n        this._friend = friend;\n        console.log(this.name(), \": I'm now friends ❤️ with \", friend.name());\n        return true;\n    }\n\n    isPlaying(): boolean {\n        return (\n            this.isMoving() &&\n            (this.currentStateEnum === States.runRight ||\n                this.currentStateEnum === States.runLeft)\n        );\n    }\n\n    emoji(): string {\n        return '🐶';\n    }\n}\n\nexport class Totoro extends BasePetType {\n    label = 'totoro';\n    sequence = {\n        startingState: States.sitIdle,\n        sequenceStates: [\n            {\n                state: States.sitIdle,\n                possibleNextStates: [States.walkRight, States.lie],\n            },\n            {\n                state: States.lie,\n                possibleNextStates: [States.walkRight, States.walkLeft],\n            },\n            {\n                state: States.walkRight,\n                possibleNextStates: [States.walkLeft, States.sitIdle],\n            },\n            {\n                state: States.walkLeft,\n                possibleNextStates: [\n                    States.sitIdle,\n                    States.climbWallLeft,\n                    States.sitIdle,\n                ],\n            },\n            {\n                state: States.climbWallLeft,\n                possibleNextStates: [States.wallHangLeft],\n            },\n            {\n                state: States.wallHangLeft,\n                possibleNextStates: [States.jumpDownLeft],\n            },\n            {\n                state: States.jumpDownLeft,\n                possibleNextStates: [States.land],\n            },\n            {\n                state: States.land,\n                possibleNextStates: [\n                    States.sitIdle,\n                    States.walkRight,\n                    States.lie,\n                ],\n            },\n            {\n                state: States.chase,\n                possibleNextStates: [States.idleWithBall],\n            },\n            {\n                state: States.idleWithBall,\n                possibleNextStates: [States.walkRight, States.walkLeft],\n            },\n        ],\n    };\n    emoji(): string {\n        return '🐾';\n    }\n}\nexport class Cat extends BasePetType {\n    label = 'cat';\n    sequence = {\n        startingState: States.sitIdle,\n        sequenceStates: [\n            {\n                state: States.sitIdle,\n                possibleNextStates: [States.walkRight, States.runRight],\n            },\n            {\n                state: States.walkRight,\n                possibleNextStates: [States.walkLeft, States.runLeft],\n            },\n            {\n                state: States.runRight,\n                possibleNextStates: [States.walkLeft, States.runLeft],\n            },\n            {\n                state: States.walkLeft,\n                possibleNextStates: [\n                    States.sitIdle,\n                    States.climbWallLeft,\n                    States.walkRight,\n                    States.runRight,\n                ],\n            },\n            {\n                state: States.runLeft,\n                possibleNextStates: [\n                    States.sitIdle,\n                    States.climbWallLeft,\n                    States.walkRight,\n                    States.runRight,\n                ],\n            },\n            {\n                state: States.climbWallLeft,\n                possibleNextStates: [States.wallHangLeft],\n            },\n            {\n                state: States.wallHangLeft,\n                possibleNextStates: [States.jumpDownLeft],\n            },\n            {\n                state: States.jumpDownLeft,\n                possibleNextStates: [States.land],\n            },\n            {\n                state: States.land,\n                possibleNextStates: [\n                    States.sitIdle,\n                    States.walkRight,\n                    States.runRight,\n                ],\n            },\n            {\n                state: States.chase,\n                possibleNextStates: [States.idleWithBall],\n            },\n            {\n                state: States.idleWithBall,\n                possibleNextStates: [\n                    States.walkRight,\n                    States.walkLeft,\n                    States.runLeft,\n                    States.runRight,\n                ],\n            },\n        ],\n    };\n    emoji(): string {\n        return '🐱';\n    }\n}\n\nexport class Dog extends BasePetType {\n    label = 'dog';\n    sequence = {\n        startingState: States.sitIdle,\n        sequenceStates: [\n            {\n                state: States.sitIdle,\n                possibleNextStates: [\n                    States.walkRight,\n                    States.runRight,\n                    States.lie,\n                ],\n            },\n            {\n                state: States.lie,\n                possibleNextStates: [States.walkRight, States.runRight],\n            },\n            {\n                state: States.walkRight,\n                possibleNextStates: [States.walkLeft, States.runLeft],\n            },\n            {\n                state: States.runRight,\n                possibleNextStates: [States.walkLeft, States.runLeft],\n            },\n            {\n                state: States.walkLeft,\n                possibleNextStates: [\n                    States.sitIdle,\n                    States.lie,\n                    States.walkRight,\n                    States.runRight,\n                ],\n            },\n            {\n                state: States.runLeft,\n                possibleNextStates: [\n                    States.sitIdle,\n                    States.lie,\n                    States.walkRight,\n                    States.runRight,\n                ],\n            },\n            {\n                state: States.chase,\n                possibleNextStates: [States.idleWithBall],\n            },\n            {\n                state: States.idleWithBall,\n                possibleNextStates: [\n                    States.walkRight,\n                    States.walkLeft,\n                    States.runLeft,\n                    States.runRight,\n                ],\n            },\n        ],\n    };\n    emoji(): string {\n        return '🐶';\n    }\n}\n\nexport class Snake extends BasePetType {\n    label = 'snake';\n    sequence = {\n        startingState: States.sitIdle,\n        sequenceStates: [\n            {\n                state: States.sitIdle,\n                possibleNextStates: [States.walkRight, States.runRight],\n            },\n            {\n                state: States.walkRight,\n                possibleNextStates: [States.walkLeft, States.runLeft],\n            },\n            {\n                state: States.runRight,\n                possibleNextStates: [States.walkLeft, States.runLeft],\n            },\n            {\n                state: States.walkLeft,\n                possibleNextStates: [\n                    States.sitIdle,\n                    States.walkRight,\n                    States.runRight,\n                ],\n            },\n            {\n                state: States.runLeft,\n                possibleNextStates: [\n                    States.sitIdle,\n                    States.walkRight,\n                    States.runRight,\n                ],\n            },\n            {\n                state: States.chase,\n                possibleNextStates: [States.idleWithBall],\n            },\n            {\n                state: States.idleWithBall,\n                possibleNextStates: [\n                    States.walkRight,\n                    States.walkLeft,\n                    States.runLeft,\n                    States.runRight,\n                ],\n            },\n        ],\n    };\n    emoji(): string {\n        return '🐍';\n    }\n}\n\nexport class Clippy extends BasePetType {\n    label = 'clippy';\n    sequence = {\n        startingState: States.sitIdle,\n        sequenceStates: [\n            {\n                state: States.sitIdle,\n                possibleNextStates: [States.walkRight, States.runRight],\n            },\n            {\n                state: States.walkRight,\n                possibleNextStates: [States.walkLeft, States.runLeft],\n            },\n            {\n                state: States.runRight,\n                possibleNextStates: [States.walkLeft, States.runLeft],\n            },\n            {\n                state: States.walkLeft,\n                possibleNextStates: [States.sitIdle],\n            },\n            {\n                state: States.runLeft,\n                possibleNextStates: [States.sitIdle],\n            },\n            {\n                state: States.chase,\n                possibleNextStates: [States.idleWithBall],\n            },\n            {\n                state: States.idleWithBall,\n                possibleNextStates: [\n                    States.walkRight,\n                    States.walkLeft,\n                    States.runLeft,\n                    States.runRight,\n                ],\n            },\n        ],\n    };\n    emoji(): string {\n        return '📎';\n    }\n}\n\nexport class RubberDuck extends BasePetType {\n    label = 'rubber-duck';\n    sequence = {\n        startingState: States.sitIdle,\n        sequenceStates: [\n            {\n                state: States.sitIdle,\n                possibleNextStates: [States.walkRight, States.runRight],\n            },\n            {\n                state: States.walkRight,\n                possibleNextStates: [States.walkLeft, States.runLeft],\n            },\n            {\n                state: States.runRight,\n                possibleNextStates: [States.walkLeft, States.runLeft],\n            },\n            {\n                state: States.walkLeft,\n                possibleNextStates: [States.sitIdle],\n            },\n            {\n                state: States.runLeft,\n                possibleNextStates: [States.sitIdle],\n            },\n            {\n                state: States.chase,\n                possibleNextStates: [States.idleWithBall],\n            },\n            {\n                state: States.idleWithBall,\n                possibleNextStates: [\n                    States.walkRight,\n                    States.walkLeft,\n                    States.runLeft,\n                    States.runRight,\n                ],\n            },\n        ],\n    };\n    emoji(): string {\n        return '🐥';\n    }\n}\n\nexport class Crab extends BasePetType {\n    label = 'crab';\n    sequence = {\n        startingState: States.sitIdle,\n        sequenceStates: [\n            {\n                state: States.sitIdle,\n                possibleNextStates: [States.walkRight, States.runRight],\n            },\n            {\n                state: States.walkRight,\n                possibleNextStates: [States.walkLeft, States.runLeft],\n            },\n            {\n                state: States.runRight,\n                possibleNextStates: [States.walkLeft, States.runLeft],\n            },\n            {\n                state: States.walkLeft,\n                possibleNextStates: [States.sitIdle],\n            },\n            {\n                state: States.runLeft,\n                possibleNextStates: [States.sitIdle],\n            },\n            {\n                state: States.chase,\n                possibleNextStates: [States.idleWithBall],\n            },\n            {\n                state: States.idleWithBall,\n                possibleNextStates: [\n                    States.walkRight,\n                    States.walkLeft,\n                    States.runLeft,\n                    States.runRight,\n                ],\n            },\n        ],\n    };\n    emoji(): string {\n        return '🦀';\n    }\n}\n\nexport class Zappy extends BasePetType {\n    label = 'zappy';\n    sequence = {\n        startingState: States.sitIdle,\n        sequenceStates: [\n            {\n                state: States.sitIdle,\n                possibleNextStates: [States.walkRight, States.runRight],\n            },\n            {\n                state: States.walkRight,\n                possibleNextStates: [States.walkLeft, States.runLeft],\n            },\n            {\n                state: States.runRight,\n                possibleNextStates: [States.walkLeft, States.runLeft],\n            },\n            {\n                state: States.walkLeft,\n                possibleNextStates: [States.sitIdle],\n            },\n            {\n                state: States.runLeft,\n                possibleNextStates: [States.sitIdle],\n            },\n            {\n                state: States.chase,\n                possibleNextStates: [States.idleWithBall],\n            },\n            {\n                state: States.idleWithBall,\n                possibleNextStates: [\n                    States.walkRight,\n                    States.walkLeft,\n                    States.runLeft,\n                    States.runRight,\n                ],\n            },\n        ],\n    };\n    emoji(): string {\n        return '⚡';\n    }\n}\n\nexport class Rocky extends BasePetType {\n    label = 'rocky';\n    sequence = {\n        startingState: States.sitIdle,\n        sequenceStates: [\n            {\n                state: States.sitIdle,\n                possibleNextStates: [States.walkRight, States.runRight],\n            },\n            {\n                state: States.walkRight,\n                possibleNextStates: [States.sitIdle, States.runRight],\n            },\n            {\n                state: States.runRight,\n                possibleNextStates: [States.sitIdle, States.walkRight],\n            },\n        ],\n    };\n    emoji(): string {\n        return '💎';\n    }\n    canChase(): boolean {\n        return false;\n    }\n}\n\nexport class InvalidPetException {}\n\nfunction getPetName(\n    collection: Map<number, string>,\n    label: string,\n    count: number,\n): string {\n    if (collection.has(count)) {\n        return collection.get(count)!;\n    } else {\n        return label + count;\n    }\n}\n\nexport function createPet(\n    petType: string,\n    el: HTMLImageElement,\n    collision: HTMLDivElement,\n    size: PetSize,\n    left: number,\n    bottom: number,\n    petRoot: string,\n    floor: number,\n    name: string | undefined,\n): IPetType {\n    if (petType === 'totoro') {\n        if (name === undefined) {\n            name = getPetName(TOTORO_NAMES, PetType.totoro, Totoro.count + 1);\n        }\n        return new Totoro(\n            el,\n            collision,\n            size,\n            left,\n            bottom,\n            petRoot,\n            floor,\n            name,\n            PetSpeed.normal,\n        );\n    }\n    if (petType === 'cat') {\n        if (name === undefined) {\n            name = getPetName(\n                CAT_NAMES,\n                PetType.cat,\n                Cat.count + Dog.count + 1,\n            );\n        } // Cat and dog share the same name list\n        return new Cat(\n            el,\n            collision,\n            size,\n            left,\n            bottom,\n            petRoot,\n            floor,\n            name,\n            PetSpeed.normal,\n        );\n    } else if (petType === 'dog') {\n        if (name === undefined) {\n            name = getPetName(\n                DOG_NAMES,\n                PetType.dog,\n                Dog.count + Cat.count + 1,\n            );\n        } // Cat and dog share the same name list\n        return new Dog(\n            el,\n            collision,\n            size,\n            left,\n            bottom,\n            petRoot,\n            floor,\n            name,\n            PetSpeed.normal,\n        );\n    } else if (petType === 'snake') {\n        if (name === undefined) {\n            name = getPetName(SNAKE_NAMES, PetType.snake, Snake.count + 1);\n        }\n        return new Snake(\n            el,\n            collision,\n            size,\n            left,\n            bottom,\n            petRoot,\n            floor,\n            name,\n            PetSpeed.verySlow,\n        );\n    } else if (petType === 'clippy') {\n        if (name === undefined) {\n            name = getPetName(CLIPPY_NAMES, PetType.clippy, Clippy.count + 1);\n        }\n        return new Clippy(\n            el,\n            collision,\n            size,\n            left,\n            bottom,\n            petRoot,\n            floor,\n            name,\n            PetSpeed.slow,\n        );\n    } else if (petType === 'crab') {\n        if (name === undefined) {\n            name = getPetName(CRAB_NAMES, PetType.crab, Crab.count + 1);\n        }\n        return new Crab(\n            el,\n            collision,\n            size,\n            left,\n            bottom,\n            petRoot,\n            floor,\n            name,\n            PetSpeed.slow,\n        );\n    } else if (petType === 'rubber-duck') {\n        if (name === undefined) {\n            name = getPetName(\n                DUCK_NAMES,\n                PetType.rubberduck,\n                RubberDuck.count + 1,\n            );\n        }\n        return new RubberDuck(\n            el,\n            collision,\n            size,\n            left,\n            bottom,\n            petRoot,\n            floor,\n            name,\n            PetSpeed.fast,\n        );\n    } else if (petType === 'zappy') {\n        if (name === undefined) {\n            name = getPetName(ZAPPY_NAMES, PetType.zappy, Zappy.count + 1);\n        }\n        return new Zappy(\n            el,\n            collision,\n            size,\n            left,\n            bottom,\n            petRoot,\n            floor,\n            name,\n            PetSpeed.veryFast,\n        );\n    } else if (petType === 'rocky') {\n        if (name === undefined) {\n            name = getPetName(ROCKY_NAMES, PetType.rocky, Rocky.count + 1);\n        }\n        return new Rocky(\n            el,\n            collision,\n            size,\n            left,\n            bottom,\n            petRoot,\n            floor,\n            name,\n            PetSpeed.still,\n        );\n    }\n    throw new InvalidPetException();\n}\n","import { PetColor, PetType } from '../common/types';\nimport { IPetType } from './pets';\n\nexport class PetInstanceState {\n    currentStateEnum: States | undefined;\n}\n\nexport class PetElementState {\n    petState: PetInstanceState | undefined;\n    petType: PetType | undefined;\n    petColor: PetColor | undefined;\n    elLeft: string | undefined;\n    elBottom: string | undefined;\n    petName: string | undefined;\n    petFriend: string | undefined;\n}\n\nexport class PetPanelState {\n    petStates: Array<PetElementState> | undefined;\n    petCounter: number | undefined;\n}\n\nexport enum HorizontalDirection {\n    left,\n    right,\n    natural, // No change to current direction\n}\n\nexport const enum States {\n    sitIdle = 'sit-idle',\n    walkRight = 'walk-right',\n    walkLeft = 'walk-left',\n    runRight = 'run-right',\n    runLeft = 'run-left',\n    lie = 'lie',\n    wallHangLeft = 'wall-hang-left',\n    climbWallLeft = 'climb-wall-left',\n    jumpDownLeft = 'jump-down-left',\n    land = 'land',\n    swipe = 'swipe',\n    idleWithBall = 'idle-with-ball',\n    chase = 'chase',\n    chaseFriend = 'chase-friend',\n}\n\nexport enum FrameResult {\n    stateContinue,\n    stateComplete,\n    // Special states\n    stateCancel,\n}\n\nexport class BallState {\n    cx: number;\n    cy: number;\n    vx: number;\n    vy: number;\n    paused: boolean;\n\n    constructor(cx: number, cy: number, vx: number, vy: number) {\n        this.cx = cx;\n        this.cy = cy;\n        this.vx = vx;\n        this.vy = vy;\n        this.paused = false;\n    }\n}\n\nexport function isStateAboveGround(state: States): boolean {\n    return (\n        state === States.climbWallLeft ||\n        state === States.jumpDownLeft ||\n        state === States.land ||\n        state === States.wallHangLeft\n    );\n}\n\nexport function resolveState(state: string, pet: IPetType): IState {\n    switch (state) {\n        case States.sitIdle:\n            return new SitIdleState(pet);\n        case States.walkRight:\n            return new WalkRightState(pet);\n        case States.walkLeft:\n            return new WalkLeftState(pet);\n        case States.runRight:\n            return new RunRightState(pet);\n        case States.runLeft:\n            return new RunLeftState(pet);\n        case States.lie:\n            return new LieState(pet);\n        case States.wallHangLeft:\n            return new WallHangLeftState(pet);\n        case States.climbWallLeft:\n            return new ClimbWallLeftState(pet);\n        case States.jumpDownLeft:\n            return new JumpDownLeftState(pet);\n        case States.land:\n            return new LandState(pet);\n        case States.swipe:\n            return new SwipeState(pet);\n        case States.idleWithBall:\n            return new IdleWithBallState(pet);\n        case States.chaseFriend:\n            return new ChaseFriendState(pet);\n    }\n    return new SitIdleState(pet);\n}\n\nexport interface IState {\n    label: string;\n    spriteLabel: string;\n    horizontalDirection: HorizontalDirection;\n    pet: IPetType;\n    nextFrame(): FrameResult;\n}\n\nclass AbstractStaticState implements IState {\n    label = States.sitIdle;\n    idleCounter: number;\n    spriteLabel = 'idle';\n    holdTime = 50;\n    pet: IPetType;\n\n    horizontalDirection = HorizontalDirection.left;\n\n    constructor(pet: IPetType) {\n        this.idleCounter = 0;\n        this.pet = pet;\n    }\n\n    nextFrame(): FrameResult {\n        this.idleCounter++;\n        if (this.idleCounter > this.holdTime) {\n            return FrameResult.stateComplete;\n        }\n        return FrameResult.stateContinue;\n    }\n}\n\nexport class SitIdleState extends AbstractStaticState {\n    label = States.sitIdle;\n    spriteLabel = 'idle';\n    horizontalDirection = HorizontalDirection.right;\n    holdTime = 50;\n}\n\nexport class LieState extends AbstractStaticState {\n    label = States.lie;\n    spriteLabel = 'lie';\n    horizontalDirection = HorizontalDirection.right;\n    holdTime = 50;\n}\n\nexport class WallHangLeftState extends AbstractStaticState {\n    label = States.wallHangLeft;\n    spriteLabel = 'wallgrab';\n    horizontalDirection = HorizontalDirection.left;\n    holdTime = 50;\n}\n\nexport class LandState extends AbstractStaticState {\n    label = States.land;\n    spriteLabel = 'land';\n    horizontalDirection = HorizontalDirection.left;\n    holdTime = 10;\n}\n\nexport class SwipeState extends AbstractStaticState {\n    label = States.swipe;\n    spriteLabel = 'swipe';\n    horizontalDirection = HorizontalDirection.natural;\n    holdTime = 15;\n}\n\nexport class IdleWithBallState extends AbstractStaticState {\n    label = States.idleWithBall;\n    spriteLabel = 'with_ball';\n    horizontalDirection = HorizontalDirection.left;\n    holdTime = 30;\n}\n\nexport class WalkRightState implements IState {\n    label = States.walkRight;\n    pet: IPetType;\n    spriteLabel = 'walk';\n    horizontalDirection = HorizontalDirection.right;\n    leftBoundary: number;\n    speedMultiplier = 1;\n    idleCounter: number;\n    holdTime = 60;\n\n    constructor(pet: IPetType) {\n        this.leftBoundary = Math.floor(window.innerWidth * 0.95);\n        this.pet = pet;\n        this.idleCounter = 0;\n    }\n\n    nextFrame(): FrameResult {\n        this.idleCounter++;\n        this.pet.positionLeft(\n            this.pet.left() + this.pet.speed() * this.speedMultiplier,\n        );\n        if (\n            this.pet.isMoving() &&\n            this.pet.left() >= this.leftBoundary - this.pet.width()\n        ) {\n            return FrameResult.stateComplete;\n        } else if (!this.pet.isMoving() && this.idleCounter > this.holdTime) {\n            return FrameResult.stateComplete;\n        }\n        return FrameResult.stateContinue;\n    }\n}\n\nexport class WalkLeftState implements IState {\n    label = States.walkLeft;\n    spriteLabel = 'walk';\n    horizontalDirection = HorizontalDirection.left;\n    pet: IPetType;\n    speedMultiplier = 1;\n    idleCounter: number;\n    holdTime = 60;\n\n    constructor(pet: IPetType) {\n        this.pet = pet;\n        this.idleCounter = 0;\n    }\n\n    nextFrame(): FrameResult {\n        this.pet.positionLeft(\n            this.pet.left() - this.pet.speed() * this.speedMultiplier,\n        );\n        if (this.pet.isMoving() && this.pet.left() <= 0) {\n            return FrameResult.stateComplete;\n        } else if (!this.pet.isMoving() && this.idleCounter > this.holdTime) {\n            return FrameResult.stateComplete;\n        }\n        return FrameResult.stateContinue;\n    }\n}\n\nexport class RunRightState extends WalkRightState {\n    label = States.runRight;\n    spriteLabel = 'walk_fast';\n    speedMultiplier = 1.6;\n    holdTime = 130;\n}\n\nexport class RunLeftState extends WalkLeftState {\n    label = States.runLeft;\n    spriteLabel = 'walk_fast';\n    speedMultiplier = 1.6;\n    holdTime = 130;\n}\n\nexport class ChaseState implements IState {\n    label = States.chase;\n    spriteLabel = 'run';\n    horizontalDirection = HorizontalDirection.left;\n    ballState: BallState;\n    canvas: HTMLCanvasElement;\n    pet: IPetType;\n\n    constructor(\n        pet: IPetType,\n        ballState: BallState,\n        canvas: HTMLCanvasElement,\n    ) {\n        this.pet = pet;\n        this.ballState = ballState;\n        this.canvas = canvas;\n    }\n\n    nextFrame(): FrameResult {\n        if (this.ballState.paused) {\n            return FrameResult.stateCancel; // Ball is already caught\n        }\n        if (this.pet.left() > this.ballState.cx) {\n            this.horizontalDirection = HorizontalDirection.left;\n            this.pet.positionLeft(this.pet.left() - this.pet.speed());\n        } else {\n            this.horizontalDirection = HorizontalDirection.right;\n            this.pet.positionLeft(this.pet.left() + this.pet.speed());\n        }\n\n        if (\n            this.canvas.height - this.ballState.cy <\n                this.pet.width() + this.pet.floor() &&\n            this.ballState.cx < this.pet.left() &&\n            this.pet.left() < this.ballState.cx + 15\n        ) {\n            // hide ball\n            this.canvas.style.display = 'none';\n            this.ballState.paused = true;\n            return FrameResult.stateComplete;\n        }\n        return FrameResult.stateContinue;\n    }\n}\n\nexport class ChaseFriendState implements IState {\n    label = States.chaseFriend;\n    spriteLabel = 'run';\n    horizontalDirection = HorizontalDirection.left;\n    pet: IPetType;\n\n    constructor(pet: IPetType) {\n        this.pet = pet;\n    }\n\n    nextFrame(): FrameResult {\n        if (!this.pet.friend().isPlaying()) {\n            return FrameResult.stateCancel; // Friend is no longer playing.\n        }\n        if (this.pet.left() > this.pet.friend().left()) {\n            this.horizontalDirection = HorizontalDirection.left;\n            this.pet.positionLeft(this.pet.left() - this.pet.speed());\n        } else {\n            this.horizontalDirection = HorizontalDirection.right;\n            this.pet.positionLeft(this.pet.left() + this.pet.speed());\n        }\n\n        return FrameResult.stateContinue;\n    }\n}\n\nexport class ClimbWallLeftState implements IState {\n    label = States.climbWallLeft;\n    spriteLabel = 'wallclimb';\n    horizontalDirection = HorizontalDirection.left;\n    pet: IPetType;\n\n    constructor(pet: IPetType) {\n        this.pet = pet;\n    }\n\n    nextFrame(): FrameResult {\n        this.pet.positionBottom(this.pet.bottom() + 1);\n        if (this.pet.bottom() >= 100) {\n            return FrameResult.stateComplete;\n        }\n        return FrameResult.stateContinue;\n    }\n}\n\nexport class JumpDownLeftState implements IState {\n    label = States.jumpDownLeft;\n    spriteLabel = 'fall_from_grab';\n    horizontalDirection = HorizontalDirection.right;\n    pet: IPetType;\n\n    constructor(pet: IPetType) {\n        this.pet = pet;\n    }\n\n    nextFrame(): FrameResult {\n        this.pet.positionBottom(this.pet.bottom() - 5);\n        if (this.pet.bottom() <= this.pet.floor()) {\n            this.pet.positionBottom(this.pet.floor());\n            return FrameResult.stateComplete;\n        }\n        return FrameResult.stateContinue;\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(518);\n"],"names":["PET_NAMES","Map","CAT_NAMES","DOG_NAMES","CRAB_NAMES","CLIPPY_NAMES","TOTORO_NAMES","SNAKE_NAMES","DUCK_NAMES","ZAPPY_NAMES","ROCKY_NAMES","console","log","self","vscode","window","acquireVsCodeApi","petCounter","handleMouseOver","e","el","currentTarget","allPets","pets","forEach","element","collision","pet","canSwipe","swipe","addPetToPanel","petType","basePetUri","petColor","petSize","left","bottom","floor","name","petSpriteElement","document","createElement","className","getElementById","appendChild","collisionElement","root","newPet","createPet","addEventListener","setInterval","seekNewFriends","message","postMessage","text","command","nextFrame","saveState","PetElement","state","PetPanelState","petStates","Array","petItem","push","petName","color","type","petState","getState","petFriend","friend","undefined","elLeft","style","elBottom","setState","randomStartPosition","Math","random","innerWidth","canvas","ctx","initCanvas","getContext","width","height","innerHeight","PetCollection","theme","themeKind","ballRadius","size","_themeKind","body","backgroundImage","calculateFloor","damping","ballState","throwBall","clearRect","paused","requestAnimationFrame","cx","vx","cy","vy","beginPath","arc","PI","fillStyle","fill","isNaN","recoveryMap","p","parseInt","set","InvalidPetException","recoverState","locate","recoverFriend","event","data","display","BallState","petEl","canChase","chase","id","remove","reset","InvalidStateException","calculateSpriteWidth","constructor","this","_pets","find","collection","value","obj","i","length","splice","messages","petInCollection","hasFriend","potentialFriend","makeFriendsWith","emoji","BasePetType","spriteElement","petRoot","speed","label","sequence","startingState","sequenceStates","_floor","_left","_bottom","initSprite","currentStateEnum","currentState","resolveState","_name","_speed","count","maxWidth","maxHeight","positionBottom","positionLeft","isMoving","_friend","isStateAboveGround","holdState","holdStateEnum","ChaseState","faceLeft","transform","faceRight","setAnimation","face","src","endsWith","chooseNextState","fromState","possibleNextStates","horizontalDirection","HorizontalDirection","right","spriteLabel","isPlaying","frameResult","FrameResult","stateComplete","nextState","stateCancel","Totoro","Cat","Dog","Snake","Clippy","RubberDuck","Crab","Zappy","Rocky","getPetName","has","get","SitIdleState","WalkRightState","WalkLeftState","RunRightState","RunLeftState","LieState","WallHangLeftState","ClimbWallLeftState","JumpDownLeftState","LandState","SwipeState","IdleWithBallState","ChaseFriendState","AbstractStaticState","holdTime","idleCounter","stateContinue","natural","speedMultiplier","leftBoundary","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}